//JOptionPane.showOptionDialog(null, Collection, "Result", JOptionPane.PLAIN_MESSAGE, JOptionPane.INFORMATION_MESSAGE, plus , null,0);

// && - (AND) both conditions amust be true

A while loop will check the condition and then proceed to execute the block of code
while (true){
    code
}

However, a do loop will execute the block of code at least once and then check the conditon for further looping

do {
    code
}while (true)

the 'true' syntax means that there is no end condition thus it will loop infinitly
for loop - executes a block of code a limited amout of times#
for (index,condition, increment/decrement)
sytanx :
 i short for index,
 i++ increment by 1
 i-- decrement by 1
 eg. i-=2 decrement by 2
 eg. i+=3 increment by 3
 
 condition ? value_if_true : value_if_false
 ? is a ternary operator it is a short version of writing an if else statement  
 
 
        // printf() =     an optional method to control, format, and display text to the console window
        //                two arguments = format string + (object/variable/value)
        //                % [flags] [precision] [width] [conversion-character]
        // [conversion-character]
        //System.out.printf("%b",myBoolean);
        //System.out.printf("%c",myChar);
        //System.out.printf("%s",myString);
        //System.out.printf("%d",myInt);
        //System.out.printf("%f",myDouble);
        
        //[width]
        // minimum number of characters to be written as output
        //System.out.printf("Hello %10s",myString);
        
        //[precision]
        // sets number of digits of precision when outputting floating-point values
        //System.out.printf("You have this much money %.1f",myDouble);
        
        // [flags]
        // adds an effect to output based on the flag added to format specifier
        // - : left-justify
        // + : output a plus ( + ) or minus ( - ) sign for a numeric value
        // 0 : numeric values are zero-padded
        // , : comma grouping separator if numbers > 1000
        
        
        
Try and Catch function creates an error box and allows the user to continue using the program instead of crashing.

try{
    input
} catch (NumberFormatException e) { //'e' exception object 
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter the correct value."); //eg with joptionpane
                continue;
            }